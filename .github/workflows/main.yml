# This is a basic workflow to help you get started with Actions

name: Getting Started

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
      inputs:
      file_url:
        description: 'URL of the file to fetch'
        required: true
        default: 'https://jslib.k6.io/aws/0.14.0/s3.js'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: printf 'Hello, world!\n'

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          printf 'What is in this directory?\n'
          ls -la
          printf 'Disk df'
          df
          printf 'Path:\n'
          echo $PATH
          printf 'Is Node.js installed?\n'
          node -v
          printf 'Is npm installed?\n'
          npm -v
          printf 'What version of bash\n'
          bash --version
          printf 'Who am I?\n'
          whoami
          printf 'Environment variables\n'
          env


  fetch-file:
    runs-on: ubuntu-latest
    steps:
      # 2. Checkout the repository (optional, but often useful)
      - name: Checkout repository
        uses: actions/checkout@v4

      # 3. Try to "ping" the file URL until it's available (or max retries reached)
      - name: Check if file is available
        run: |
          URL="${{ inputs.file_url }}"
          MAX_RETRIES=${{ inputs.max_retries }}
          RETRY_DELAY=10 # seconds between tries

          echo "Checking if $URL is available..."
          for i in $(seq 1 $MAX_RETRIES); do
            # Use curl to send a HEAD request (fetches headers only, not the whole file)
            if curl --output /dev/null --silent --head --fail "$URL"; then
              echo "‚úÖ Success! File is available."
              exit 0
            else
              echo "‚è≥ Attempt $i/$MAX_RETRIES failed. Retrying in $RETRY_DELAY seconds..."
              if [ $i -lt $MAX_RETRIES ]; then
                sleep $RETRY_DELAY
              fi
            fi
          done

          echo "‚ùå Error: File was not available after $MAX_RETRIES attempts."
          exit 1

      # 4. Download the file now that we know it's available
      - name: Download file
        run: |
          # Extract the filename from the URL
          FILENAME=$(basename "${{ inputs.file_url }}")
          # Download the file using curl, saving it with its original name
          curl -s -O "${{ inputs.file_url }}"
          echo "File downloaded as: $FILENAME"

      # 5. Get and output the file size
      - name: Output file size
        run: |
          FILENAME=$(basename "${{ inputs.file_url }}")
          if [ -f "$FILENAME" ]; then
            # Get the size in bytes
            SIZE_BYTES=$(wc -c < "$FILENAME" | tr -d ' ')
            # Convert to human-readable format (KB, MB)
            SIZE_HR=$(numfmt --to=iec-i --suffix=B $SIZE_BYTES)
            echo "üìÅ File: $FILENAME"
            echo "üíæ Size: $SIZE_BYTES bytes ($SIZE_HR)"
            # You can also set this as an output for use in other steps/jobs
            echo "file_size_bytes=$SIZE_BYTES" >> $GITHUB_OUTPUT
            echo "file_size_human=$SIZE_HR" >> $GITHUB_OUTPUT
          else
            echo "Error: File $FILENAME was not found."
            exit 1
          fi

      # 6. (Optional) Upload the file as an artifact to download from the Actions UI
      - name: Upload file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: downloaded-file
          path: ${{ github.workspace }}/$(basename "${{ inputs.file_url }}")
          
