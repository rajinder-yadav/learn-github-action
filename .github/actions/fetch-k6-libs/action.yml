name: Fetch K6 library
description: Download K6 lib files

inputs:
  artifactory_url:
    description: BMO artifactory base URL
    required: true
  artifactory_repo:
    description: NPM repository name
    required: true
  bmo_package_name:
    description: BMO scoped NPM package name
    required: true
  k6_lib_tarball_url:
    description: K6 library Github URL
    required: true
  k6_lib_api_url:
    description: K6 Github API repository info endpoint
    required: true

runs:
  using: "composite"
  steps:
    # - name: Get Artifactroy credentials
    #   id: get-artifactory-credentials
    #   uses:
    #   with:
    #     secrets: |

  - name: Get version info
    id: get_version
    shell: bash
    run: |
      current_version="0.0.1"
      remote_version=$(curl -s ${{ inputs.k6_lib_api_url }} | jq -r ".tag_name")
      remote_version=${remote_version#v}
      printf "Current version: %s\n" $current_version
      printf "Latest version: %s\n" $remote_version
      first=$(printf '%s\n' "$remote_version" "$current_version" | sort -V | head -n1)
      if [[ $first == "$remote_version" ]]; then
        echo "download_tarball=false" >> $GITHUB_OUTPUT
      else
        echo "download_tarball=true" >> $GITHUB_OUTPUT
      fi
      echo "current_version=$current_version" >> $GITHUB_OUTPUT
      echo "remote_version=$remote_version" >> $GITHUB_OUTPUT

  - name: Download K6 tarball
    id: download_k6_tarball
    shell: bash
    if: ${{ steps.get_version.outputs.download_tarball != 'false' }}
    run: |
      cd ${{ github.action_path }}
      mkdir download
      cd download
      echo "Downloading K6 libary tarball"
      curl -LO ${{ inputs.k6_lib_tarball_url }}/v${{ steps.get_version.output.remote_version }}.tar.gz
      ls -l
      echo "Expanding K6 tarball download"
      echo "filename: " v${{ steps.get_version.output.remote_version }}.tar.gz
      tar -xf *.tar.gz
      echo "Listing build artifacts"
      DIR=$(ls -d k6-jslib*|head -n 1)
      if [[ -d $DIR/build ]]; then
        ls -l $DIR/build
        echo "build_folder=$DIR/build" >> $GITHUB_OUTPUT
      elif [[ -d $DIR/dist ]]; then
        echo "build_folder=$DIR/dist" >> $GITHUB_OUTPUT
      elif [[ -f $DIR/index.js ]]; then
        echo "build_folder=$DIR" >> $GITHUB_OUTPUT
      elif [[ -f $DIR/src/httpx.js ]]; then
        echo "build_folder=$DIR/src" >> $GITHUB_OUTPUT
      else
        echo "build_folder=''">> $GITHUB_OUTPUT
      fi

  - name: Create a NPM package
    shell: bash
    if: ${{ steps.get_version.outputs.download_tarball != 'false' }}
    run: |
      echo ">> " ${{ steps.download_k6_tarball.outputs.build_folder }}
      if [[ -n ${{ steps.download_k6_tarball.outputs.build_folder }} ]]; then
      echo "Creating package.json file"
      remote_version=${{ steps.get_version.outputs.remote_version }}
      mkdir npm-package
      cd npm-package
      cat << EOF > package.json
      {
        "name": "sandbox",
        "version": ${{ steps.get_version.outputs.remote_version }},
        "description": "",
        "main": "index.js",
        "scripts": {
          "test": "echo \"Error: no test specified\" && exit 1"
        },
        "keywords": [],
        "author": "",
        "license": "ISC",
        "type": "commonjs"
      }
      EOF
      echo "Displaying package.json"
      cat package.json
      else
      echo "No build artifact exist"
      fi


